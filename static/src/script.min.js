let apiUrl;if(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1"){apiUrl="/data"}else{apiUrl="https://natural-questions.vercel.app/data"}let currentPaginationPage=1;$(document).ready(async function(){const toggleDarkMode=enable=>{$("body").toggleClass("dark-mode",enable);$("#darkModeToggle").prop("checked",enable);localStorage.setItem("darkMode",enable);updateIframeStylesForDarkMode(enable)};const prefersDarkMode=window.matchMedia("(prefers-color-scheme: dark)").matches;const storedDarkMode=localStorage.getItem("darkMode");const isDarkMode=storedDarkMode!==null?storedDarkMode==="true":prefersDarkMode;toggleDarkMode(isDarkMode);window.matchMedia("(prefers-color-scheme: dark)").addListener(e=>{if(localStorage.getItem("darkMode")===null){toggleDarkMode(e.matches)}});$("#darkModeToggle").on("change",function(){toggleDarkMode(this.checked)});const storedRunId=localStorage.getItem("runId");if(storedRunId!==RUN_ID){localStorage.clear();sessionStorage.clear();localStorage.setItem("runId",RUN_ID)}await fetchData();$("#csv-selector, #page-size").change(async function(){currentPaginationPage=1;await fetchData()});$("body").on("click",".top-pagination .page-link",async function(e){e.preventDefault();const page=$(this).data("page");currentPaginationPage=page;await fetchData(page)});window.onscroll=function(){if(document.body.scrollTop>20||document.documentElement.scrollTop>20){document.getElementById("scrollToTopBtn").style.display="block"}else{document.getElementById("scrollToTopBtn").style.display="none"}};document.getElementById("scrollToTopBtn").onclick=function(){window.scrollTo({top:0,behavior:"smooth"})}});document.addEventListener("DOMContentLoaded",function(){const refreshButton=document.getElementById("refresh-data");refreshButton.addEventListener("click",async function(){const icon=this.querySelector(".icon-refresh");icon.classList.add("icon-clicked");clearCurrentPageCache();await fetchData(currentPaginationPage);icon.classList.remove("icon-clicked")})});function clearCurrentPageCache(){const selectedFile=$("#csv-selector").val();const pageSize=parseInt($("#page-size").val(),10);const cacheKey=generateCacheKey(selectedFile,currentPaginationPage,pageSize);sessionStorage.removeItem(cacheKey)}async function fetchData(page=currentPaginationPage){try{hideLoadingIndicator();showLoadingIndicator();const selectedFile=$("#csv-selector").val();const pageSize=parseInt($("#page-size").val(),10);const cacheKey=generateCacheKey(selectedFile,page,pageSize);let data=sessionStorage.getItem(cacheKey);if(!data){const response=await fetch(`${apiUrl}?table_name=${selectedFile}&page=${page}&page_size=${pageSize}`);if(!response.ok)throw new Error("Failed to fetch data from the API.");data=await response.json();sessionStorage.setItem(cacheKey,JSON.stringify(data))}else{data=JSON.parse(data)}if(!data||typeof data.currentPage==="undefined"||typeof data.totalPages==="undefined"||!Array.isArray(data.data)){throw new Error("Invalid or corrupt data structure received.")}await updatePagination(data.currentPage,data.totalPages);await updateTable(data.data,data.currentPage,data.pageSize)}catch(error){console.error("Error fetching or processing data:",error)}finally{completeProgressBar()}}function generateCacheKey(fileId,page,pageSize){return`parquetData-${RUN_ID}-${fileId}-${page}-${pageSize}`}const iframeCssTemplate=`
<style>
    /* Add Font import */
  @import url('https://fonts.googleapis.com/css2?family=Manrope&display=swap');
  
  /* Add Bootstrap CSS from CDN */
  @import url('https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css');

  /* Your existing styles */
  body { font-family: 'Manrope', sans-serif;  font-size: 14px; line-height: 1.5; color:#0d0d0d}
  table { width: 100%; height:auto; border-collapse: collapse; }
  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 14px; line-height: 1.5; color:#0d0d0d}
  ::-webkit-scrollbar { width: 5px; height: 5px; }
  ::-webkit-scrollbar-track { background: #f1f1f1; }
  ::-webkit-scrollbar-thumb { background: #888; }
  ::-webkit-scrollbar-thumb:hover { background: #555; }

  /* Dark mode styles */
  body.dark-mode { background-color: #333; color: rgb(236, 236, 236);}
  body.dark-mode th, body.dark-mode td { border-color: #444; color: rgb(236, 236, 236); }
</style>
`;function updateIframeStylesForDarkMode(isDarkMode){$("iframe").each(function(){const iframeDoc=this.contentDocument||this.contentWindow.document;$(iframeDoc.body).toggleClass("dark-mode",isDarkMode)})}$("#darkModeToggle").click(function(){const isDarkMode=$(this).is(":checked");updateIframeStylesForDarkMode(isDarkMode)});function updateTable(data,currentPage,pageSize){return new Promise(resolve=>{const tableBody=$("#data-rows");tableBody.empty();const isDarkMode=$("body").hasClass("dark-mode");data.forEach(function(row,index){const tr=$("<tr>");const rowIndex=((currentPage-1)*pageSize+(index+1)).toLocaleString();tr.append(`<td>${rowIndex}</td>`);tr.append(`<td>${row["question"]}</td>`);if(row["long_answers"].trim()){const iframeSrcdoc=`
          ${iframeCssTemplate} <!-- Assuming iframeCssTemplate is defined elsewhere in your script -->
          <body class="${isDarkMode?"dark-mode":""}">
            ${row["long_answers"]}
          </body>
        `;const iframe=$("<iframe />",{style:"width: 100%; height: auto; border: none; overflow: hidden;",srcdoc:iframeSrcdoc});iframe.on("load",function(){this.style.height=this.contentWindow.document.documentElement.scrollHeight+"px"});const td=$("<td></td>").append(iframe);tr.append(td)}else{tr.append(`<td></td>`)}if(row["short_answers"].trim()){tr.append(`<td>${row["short_answers"]}</td>`)}else{tr.append("<td></td>")}tableBody.append(tr)});resolve()})}function updatePagination(currentPage,totalPages){const paginationContainer=$(".pagination");paginationContainer.empty();paginationContainer.append(`<li class="page-item ${currentPage===1?"disabled":""}"><a class="page-link" href="#" data-page="1">First</a></li>`);paginationContainer.append(`<li class="page-item ${currentPage===1?"disabled":""}"><a class="page-link" href="#" data-page="${currentPage-1}">Previous</a></li>`);let startPage=Math.max(currentPage-2,1);let endPage=startPage+4;if(endPage>totalPages){endPage=totalPages;startPage=Math.max(endPage-4,1)}for(let i=startPage;i<=endPage;i++){paginationContainer.append(`<li class="page-item ${i===currentPage?"active":""}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`)}paginationContainer.append(`<li class="page-item ${currentPage===totalPages?"disabled":""}"><a class="page-link" href="#" data-page="${currentPage+1}">Next</a></li>`);paginationContainer.append(`<li class="page-item ${currentPage===totalPages?"disabled":""}"><a class="page-link" href="#" data-page="${totalPages}">Last</a></li>`)}function showLoadingIndicator(){$("#table-overlay").show();$("#loading-indicator").show();simulateProgressBar()}const PROGRESS_LENGTH=100;function completeProgressBar(){$("#loading-indicator .progress-bar").css("width","100%").attr("aria-valuenow",PROGRESS_LENGTH);setTimeout(()=>{hideLoadingIndicator()},PROGRESS_LENGTH)}function hideLoadingIndicator(){$("#table-overlay").hide();$("#loading-indicator").hide();$("#loading-indicator .progress-bar").css("width","0%").attr("aria-valuenow",0)}let progressInterval;function simulateProgressBar(){clearInterval(progressInterval);let progress=0;progressInterval=setInterval(function(){progress+=10;if(progress<=PROGRESS_LENGTH){$("#loading-indicator .progress-bar").css("width",progress+"%").attr("aria-valuenow",progress)}else{clearInterval(progressInterval)}},PROGRESS_LENGTH)}